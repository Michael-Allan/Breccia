Definition of the Breccian language

    - Breccia in practice is a production of concrete documents,
      here defined in abstract terms as document nodes.

              │
              │
              ├──────┐
              ╵      │     \ [graphical syntax notation], q.v. at end notes
           document  ▲
             node    │
              ╷      │
              ├──────┘
              │
              │
              ▼

            figure, The collective form of Breccia.

    document node
        - A Breccian document in abstract terms.
        - It divides into an optional head formed as a bare descriptor,
          and an optional body formed as a sequence of body nodes.

                       │
                 ┌─────┤         ┐
                 │     ╵         │
                 │ descriptor    │ head
                 │     ╷         │
                 └─────┤         ┘
                       │
                  ┌────┤         ┐
                  │    ├───┐     │
                  │    ╵   │     │
                  │  body  ▲     │ body
                  │  node  │     │
                  │    ╷   │     │
                  │    ├───┘     │
                  └────┤         ┘
                       │
                       ▼

    document title
        - The document title, if any, is determined by the first nodal head in document order
          that yields a non-empty result after collapsing the whitespace of the relevant part
          of its content according to head type:
            • document head or point head
                - The relevant part is the whole head exclusive of commentary and static blocks.
            • divider
                - The relevant part is its first label.



    ━━━━━━━━━━━━━
     Aside point
    ─────────────
        / A specialized material point.
        - A point with a bullet comprising ‘/’.
        - Its descriptor, if present, is largely free form.
            : see `Most descriptors are largely free form.$` @ `^^ Descriptor$`


    ━━━━━━━━━━━━━━━━━━━━━━
     Associative citation
    ──────────────────────
        / A command point.
        - It associates for citational purposes a preceding character sequence (the referrer),
          or several such sequences (referrers), with a particular referent.
        - Its descriptor has this form:

               ─── gap ───┬─╴`re` clause ──┬─ gap ─┬──┬─╴`see` clause ───▶
                          │                │       │  │
                          │                └───────┘  │
                          └───────────────────────────┘

            figure, The form of the descriptor of an associative citation.

        - The `re` clause indicates the referrer or referrers.
        - The `see` clause indicates the referent.
        - A single referrer may be associated with multiple referents.
            / via multiple, sibling citations that indicate the same referrer
        - Multiple referrers may be overlapped or nested in any manner.
            / via multiple, sibling citations
            / via a single citation that indicates multiple referrers at once

        `re` clause
            - The `re` clause indicates the referrer, or referrers, by a pattern of text
              occuring in the parent head of the citation.

                   ───╴‘re’╶─┬─ gap ─┬─╴‘`’╶─ pattern ─╴‘`’╶────▶
                             │       │
                             └───────┘

                - Failing a parent head, the citation is misplaced and the document malformed.
                    / This occurs only when the parent is a document node without a descriptor.
            - It works thus:
                if( the pattern contains one or more subexpression grouping constructs ‘(…)’ )
                    : re `subexpression grouping constructs`
                      see https://perldoc.perl.org/perlreref.html#SYNTAX
                    for( each match of the pattern within the parent head of the citation )
                        if( at least one subexpression captures a text sequence )
                            + Set as a referrer the union of all captured text sequences.
                else
                    for( each match of the pattern within the parent head of the citation )
                        + Set as a referrer the whole of the matching text.
            - The `re` clause is optional.
                - If omitted, then the whole of the parent head is taken as the referrer.

        `see` clause
            - The `see` clause indicates the referent.

                                                   URI
                                           ┌─── reference ───┐
                   ────╴‘see’╶─┬─ gap ─┬───┤                 ├────▶
                               │       │   │    impliable    │
                               └───────┘   └────  node   ────┘
                                                indicator

                : re `(URI)$.*(reference)` see https://tools.ietf.org/html/rfc3986#section-4.1

            - It works thus:
                if( a URI reference is given )
                    + Set as referent the resource indicated by the URI reference.
                else
                    - An impliable node indicator is given.
                    if( its first component (the principal node indicator) is omitted )
                        + Set as first component a principal node indicator
                          with a pattern `p` formed thus:
                            if( the citation has a `re` clause )
                                + Set `p` to the pattern given in the `re` clause.
                                + Broadly pattern `p`.
                                    : join `^^(else)$^^/ Broadly patterning`
                                      @ `^^generalized_pattern\( nodal_head \)$`
                                + Anchor `p` by appending ‘$’.
                            else
                                + Set `p` to the generalized pattern of the citation’s parent head.
                                    : re `generalized pattern`
                                      see `^^generalized_pattern\( nodal_head \)$`
                    if( the pattern of its principal node indicator contains
                         one or more subexpression grouping constructs ‘(…)’ )
                        : re `subexpression grouping constructs`
                          see https://perldoc.perl.org/perlreref.html#SYNTAX
                        + Set as referent the union of the text sequences they capture.
                    else
                        + Set as referent the whole of the indicated node.



    ━━━━━━━━
     Bullet
    ────────
        / Part of a point head.
        - It is confined between boundaries (diagram below) which partly determine its internal form.

                 perfect   ┊      start                             end             ┊   descriptor,
               indentation ┊╶─── sequence ──┬──┬── interior ──┬── character ──┬───▶ ┊  head successor,
                           ┊                │  │              │               │     ┊ or end of document
                                            │  └──────────────┘               │     ┊
                                            └─────────────────────────────────┘
                                    i                 ii            iii

            : re `head successor` see `^^\| the head successor$` @ `^^ Node$`
        - While the precise internal form varies according to the point type, every bullet is formally
          conditioned by basic contraints operating in several regions, here numbered i, ii, iii.
        i. start sequence, one of:
            | a character that is neither whitespace nor backslash (5C) nor divider mark
                : see `^^character identification$` @ `^^ Notes$`
            | one or more backslashes immediately followed by
              a character that is neither whitespace nor backslash
                \ Whitespace would make it a sequence of a comment block, not a bullet.
        ii. interior
            - Coming after the start character and before the end character.
            - Here the bullet may contain spacing characters, and nowhere else.
                - One or more plain spaces (20) may follow an alphanumeric character.
                    - Following any other character C would expel both from the interior, making C
                      either the end character if it meets its constraints, or part of the end boundary.
                - One or more no-break spaces (A0) may follow any non-alphanumeric character
                  other than either a plain space, or a backslash occuring in a backslash sequence
                  at the start of the bullet. \ The backslash case is excluded because it would
                    \ complicate `Emacs/Breccia_mode.el`, and anyway appears to be useless.
                    - Here the excluded sequences are not expulsive, rather they are simply forbidden.
                - No other whitespace is allowed, namely no newline: it could not be part of a bullet,
                  only of its end boundary.
        iii. end character, a character that is none of:
            | whitespace
            | a backslash subsequent to a plain space of the interior
                \ That would start the end boundary in the form of inline commentary,
                \ part of a descriptor.



    ━━━━━━━━━━
     Citation
    ──────────
        associative citation
            : join
        inline URI
            - A URI in a place that does not call for a URI.
                / E.g. in a comment, or the descriptor of a material point.
                / A URI as opposed to a URI reference, whose form cannot reliably be distinguished.
            - An inline URI must not directly be followed by punctuation which might be taken as part
              of it unless the URI is symmetrically quoted, e.g. using backquotes or angle braces.
                / Like this, for example, <http://reluk.ca/#foo>.
                  Or even this, .http://reluk.ca/#foo.
                  But not this, http://reluk.ca/#foo.  (wrong)



    ━━━━━━━━━━━━━━━
     Command point
    ───────────────
        / A formal point.
        - A point with a bullet comprising ‘:’.
        - The form of its descriptor varies with the type of command point.
            - Only in the case of *null command point* may the descriptor be omitted.
        - Processors interpret command points and execute their commands in document order.


        ────────────────────────
         types of command point
        ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
            associative citation
                : see

            jointer
                : see

            null command point
                - A command point that does nothing.
                - Its descriptor, if present, has this form:

                       ─── gap ───▶

                    figure, The form of a descriptor as it appears in a null command point.



    ━━━━━━━━━━━━
     Commentary
    ────────────
        form
            / per line
            - Begins with a sequence of one or more consecutive backslashes ‘\’ (Unicode 5C)
              immediately preceded by a space or the line start,
              and immediately followed by a space or the line end.
            - Continues to the line end.
        inline commentary
            - Commentary subsequent to non-commentary on the same line. \ ‘Commentary’ as opposed
                \ to ‘a comment’, because the comment as a whole may extend across lines.
        block commentary
            comment block
                - A sequence of lines comprising commentary alone.
                - A comment block is part of the node head that starts before it in document order.
                    - In the case of document node, the head may comprise a comment block alone.
            comment block label
                - In a comment block.
                - In a line of commentary delimited by two or more consecutive backslashes ‘\\’.
                - The label is the part subsequent to the backslash delimiter,
                  exclusive of leading and trailing whitespace.



    ━━━━━━━━━━━━
     Descriptor
    ────────────
        - Elaborative, explanatory text of a document head or point head.
        - It starts with a gap.

                           · · · ·
                           ·     ·       ┊  head successor,
               ─── gap ─── ·  ?  · ────▶ ┊ or end of document
                           ·     ·       ┊
                           · · · ·

            : re `head successor` see `^^\| the head successor$` @ `^^ Node$`
        - What follows the gap (?) depends on the type of node in which the descriptor appears.
        - Here most descriptors are largely free form, constrained only by the end boundary
          of their head (as shown).
            - The descriptor of a formal point, however, is further constrained.
                : re `formal point` see `^^typology$` @ `^^ Point$`
        gap
            - A formal intermediary within a descriptor.

                  ┌─────────────────────╴◀───────────────────────────────────────┐
                  │                                                              │
                  │  ┌────────────────────────╴‘ ’╶───────────────────────────┐  │
                  │  │                                                        │  │
               ───┴──┤                                         block          ├──┴───▶
                     │        inline                    ┌─── commentary ───┐  │
                     └──┬── commentary ──┬── newline ───┤                  ├──┘
                        │                │              ├── static block ──┤
                        └────────────────┘              │                  │
                                                        └──────────────────┘



    ━━━━━━━━━━
     Division
    ──────────
        / A body node.
        - Its head is called a divider.
        divider
            - Comprises one or more divider segments.
            - No two dividers are contiguous; rather they combine as one divider of multiple segments.
        divider segment
            - Begins with a perfectly indented divider mark.
            - The end boundary is the next appearance in document order of either
              a divider segment, a point, or the end of the document.
        divider mark
            - Unicode 2500-259F.
            / Divider mark = drawing character ∪ inversion mark.
            drawing character
                - Unicode 2500-2587, 2589-258F, 2591-259F.
            inversion mark
                - Unicode 2588 (full block), 2590 (right half block).
        division label
            - A sequence of non divider-mark characters in a divider,
              exclusive of leading and trailing whitespace.
            inverse label
                - A sequence of non divider-mark, non newline characters in a divider,
                  exclusive of leading and trailing whitespace and preceded on the same line
                  by an inversion mark, with at most (the leading) space characters between the two.
                - Normally the inverse label, together with any leading or trailing whitespace,
                  is presented in inverse video.
                    - Except that any inline commentary is still presented in plain video.
                - Where a full block character succeeds an inversion mark on the same line,
                  with at most non divider-mark characters in between,
                  that full block is disabled as an inversion mark.
                    / Viz. the full block pairs with the preceding inversion mark,
                      and by itself does not start a new inverse label.
                    / Viz. a single full block trailing an inverse label cannot start
                      a second inverse label.
            division title
                - A division label that leads a line, with at most space characters in front.
                - Normally it is displayed with greater prominence than an ordinary label,
                  e.g. using a bold face.



    ━━━━━━━━━━━━━━━━━
     Exception point
    ─────────────────
        / A specialized material point.
        - Bullet comprising or terminated ‘!!’.
        - Exception points are justified by the Breccian purpose of drafting, wherein the ability
          to note exceptions is a useful aid.
            : re `purpose of drafting` see `^^Breccia$` @ lexicon.brec



    ━━━━━━━━━━━━━━━
     Generic point
    ───────────────
        / A material point.
        - A non specialized point.
            - A point for which the language defines no special role or bullet form.
        - Its bullet is largely free form, conditioned only by the basic constraints.
            : re `basic constraints` see `(basic constraints) ` @ `^^ Bullet$`



    ━━━━━━━━━
     Jointer
    ─────────
        / A command point.
        - A jointer stands for the body of its referent node.
        example

              join foo/bar.br

        form

              join  IMPLIABLE_NODE_INDICATOR

            IMPLIABLE_NODE_INDICATOR
                - An impliable node indicator.
                - Indicates the referent node.
                - The default value for the first component of the indicator, or the implied value
                  of the whole indicator if all its components are omitted, is a principal node indicator
                  formed using the generalized pattern of the jointer’s parent head.
                    : re `generalized pattern` see `^^generalized_pattern\( nodal_head \)$`
                - Will not match where the joint would have no effect.
                    : re `effect` see @ `^^ Jointer$`
                    / This stops the jointer matching its own parent, for instance,
                      or a parent of like form.
            NODAL_SCOPER
                - The scope qualifier of the NODAL_PATTERN.
            URI_REFERENCE
                - URI reference of the document of the sreferent node.
                - The use of the ‘@’ separator is optional, a matter of preference.
                - Optional, defaults to the same document as the jointer.
        effect
            - The parent of a jointer gains for a child (subjoint child) each child of the referent node
              that does not duplicate a pre-existing child.
            - The children of a referent node gain for a parent (surjoint parent)
              each parent of the jointer that does not duplicate a pre-existing parent.
            - In both cases, the duplication test ignores variations in commentary and whitespacing.
            - The effect applies recursively where a subjoint child is itself a jointer,
              or a surjoint parent itself the referent node of a jointer.



    ━━━━━━
     Node
    ──────
        typology
            ◇ node
                • document node
                ◇ body node
                    • division
                    • point

        abstract form
            - A node divides formally into two parts: a head and a body.

                      │
                      ╵
                   · · · ·      ┐
                   ·     ·      │
                   ·  ?  ·      │ head
                   ·     ·      │
                   · · · ·      ┘
                      ╷
                      │
                 ┌────┤
                 │    ├───┐     ┐
                 │    ╵   │     │
                 │  body  ▲     │ body
                 │  node  │     │
                 │    ╷   │     │
                 │    ├───┘     ┘
                 └────┤
                      │
                      ▼

            head
                - The part of a node exclusive of its children.
                - Its internal form (abstracted from the diagram) varies according to the node type.
                - Its end boundary (not fully shown) always comprises one of:
                    | the head successor
                        - The head successor (S) is the node succeeding the head in document order.
                        - In terms relative to the head’s own node N, S is the first applicable of:
                            | the first child of N
                                / in its body, that is
                            | the next sibling of N
                            | the next sibling of the nearest ancestor of N which is not itself
                              a final sibling
                    | the end of the document
            body
                - The part of a node comprising its children alone; a sequence of body nodes.
                - A body is always optional: regardless of the node type, it may be omitted.

        nodal relations
            • parent
                - The parent of a node is the first applicable of:
                    | its nearest (in document order) nodal precedecessor of less indentation
                    | the document node
            • child
                - A node that has a parent.
                - All body nodes are children.
                - No document node is a child.


        ──────────────────────────
         impliable node indicator
        ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
            - An indicator of a Breccian node, here referred to as ‘the principal node’.

                                           ┌─────────╴◀─────────────┐
                                           │                        │
                          principal        │             ancestral  │                    proper
                   ───┬──╴  node   ╶──┬──┬─┴─┬─ gap ─┬──╴  node   ╶─┴──┬──┬──┬─ gap ─┬── document ──┬───▶
                      │   indicator   │  │   │       │   indicator     │  │  │       │   indicator  │
                      │               │  │   └───────┘                 │  │  └───────┘              │
                      └───────────────┘  └─────────────────────────────┘  └─────────────────────────┘

            - Any reference to this form will be accompanied by a default value for
              its first component (the principal node indicator), which will also serve as
              the implied value of the whole indicator if all its components are omitted.

            principal node indicator
                - A direct indicator of the principal node by the pattern of its text.

                       ───╴‘`’╶─ pattern ─╴‘`’╶───▶

                - It works by indicating the return value of this procedure:
                    if( the pattern contains one or more subexpression grouping constructs ‘(…)’ )
                        : re `subexpression grouping constructs`
                          see https://perldoc.perl.org/perlreref.html#SYNTAX
                        for( each match of the pattern )
                            if( at least one subexpression captures a text sequence,
                                 and all captured text sequences lie within the same nodal head )
                                + Set as indicated the nodal head’s node.
                    else
                        for( each match of the pattern )
                            + Set as indicated the node whose head contains the first matched character
                              in document order.
                    if( exactly one node is indicated )
                        return( the indicated node )
                    throw( error, the indicator is ambiguous )

                generalized pattern( nodal head )
                    / A procedure commonly used in defining the default value
                      of a principal node indicator.
                    - Returns a pattern `p` in the form defined for a direct node indicator.
                    + Set `p` to the text of the given `nodal head`.
                    + Trim `p` of commentary.
                    + Trim `p` of leading whitespace on its first line.
                    + Regexp quote `p`.
                    + Collapse all whitespace of `p` to ‘\s+’.
                        / Neutralizing differences in indentation and line wrapping.
                    if( `nodal head` is a divider )
                        + Anchor `p` by prepending ‘^^’.
                        for( all sequential repeats (`r`) in `p` of a drawing character (`c`) )
                            + Collapse `r` to a single `c` followed by ‘+’.
                            / Neutralizing differences in horizontal length, e.g. owing to indentation.
                    else
                        / Broadly patterning to cover both division title and bullet forms.
                        + Anchor `p` by prepending ‘^ *’.
                        + Ensure that `p` functions in *case insensitive* mode (`i`).
                            : re `\*case insensitive\* mode`
                              see https://perldoc.perl.org/perlreref.html#OPERATORS
                    + Anchor `p` by appending ‘$’.
                    return( `p` )

            pattern
                - A modified, Perl compatible regular expression in multiline mode (`m`).
                    : re `Perl compatible regular expression` see https://perldoc.perl.org/perlreref.html
                    : re `multiline mode` see https://perldoc.perl.org/perlreref.html#OPERATORS
                - Its modifications are:
                    • `\t` symbolizes not a tab, but one unit of perfect indentation
                    • `^^` expands to `^\t*`, an anchored, leading sequence of perfect indentation

                forbidden pattern sequences
                    • pattern delimiter
                        / Patterns are delimited using backquote characters ‘`’.
                        - To put a literal backquote character ‘`’ in a pattern,
                          one must escape it with a backslash ‘\`’.
                        - Backslashes themselves are likewise escapable, of course.
                            / The trailing delimiter character in pattern ‘foo\\`’,
                              for example, is not escaped by the preceding backslash
                              because the backslash itself is escaped.
                    • inline commentary
                        - No start sequence for inline commentary may appear in the pattern.
                            / For example ‘·\·’ or ‘·\\·’, where ‘·’ stands for a space character.
                        - Replace it with an equivalent.
                            / For example ‘··’ and ‘·\N{U+005C}·’ respectively.

            ancestral node indicator
                - An indicator of an ancestor of the principal node.
                - It indicates the ancestor by the pattern of its text.

                       ───╴‘@’╶─┬─ gap ─┬─╴‘`’╶─ pattern ─╴‘`’╶───▶
                                │       │
                                └───────┘

                - Where multiple indicators appear in series, each successor gives the ancestral scope
                  of its predecessor.

            proper document indicator
                - An indicator of the document of the principal node.

                       ───╴‘@’╶─┬─ gap ─┬── URI reference ────▶
                                │       │
                                └───────┘

                    : re `URI reference` see https://tools.ietf.org/html/rfc3986#section-4.1



    ━━━━━━━
     Point
    ───────
        / A body node.
        - Its head comprises a perfectly indented bullet, and often a descriptor.

               start ┊                                                     ┊  head successor,
                of   ┊╶───╴  perfect  ╶─── bullet ──┬── descriptor ──┬───▶ ┊ or end of document
               line  ┊     indentation              │                │     ┊
                                                    └────────────────┘

                : re `head successor` see `^^\| the head successor$` @ `^^ Node$`
            figure, The form of a point head.

        - Both the internal forms of the bullet and descriptor, and whether the descriptor may be
          omitted, depend on the type of point.
        typology
            ◇ point
                ◇ formal point
                    • command point
                ◇ material point
                    ◇ specialized material point
                        • aside point
                        • exception point
                        • task point
                    ◇ generic point



    ━━━━━━━━━━━━━━
     Static block
    ──────────────
        - One or more lines in contiguous sequence, each headed by a no-break space.
            / Unicode A0.
        - The purpose of a static block is to enable the author to lay out a section of text freely,
          unconstrained by Breccia’s rules of indentation.
            - Regardless of its indentation, a static block does not interrupt the nodal head
              in which it occurs; rather the head continues blindly through the block.
            - A presenter capable of reformatting the layout of a Breccian text is forbidden to alter
              the layout of a static block rightward of its leading no-break spaces.



    ━━━━━━━━━━━━
     Task point
    ────────────
        / A specialized material point.
        - Bullet comprising or terminated ‘+’.
        - Task points are justified by the Breccian purpose of drafting,
          for which inline tasking is a useful aid.
            : re `purpose of drafting` see `^^Breccia$` @ lexicon.brec



    ━━━━━━━━━━━━
     Whitespace
    ────────────
        allowed characters
            : see `^^character identification$` @ `^^ Notes$`
            • space (20)
            • newline (A, D)
            • no-break space (A0) as described for use in bullets and static blocks
            / Allowing any other horizontal whitespace (9, 2000-200A, 202F, 205F, 3000)
              would be too confusing here, where simple spacing can determine the syntax.
        perfect indentation
            - Perfect indentation comes at the start of a line.
            - It comprises zero or more segments of space characters, each four in length.

                           ┌─────────╴◀───────────┐
               start ┊     │                      │
                of   ┊╶──┬─┴─╴‘ ’╶╴‘ ’╶╴‘ ’╶╴‘ ’╶─┴─┬───▶
               line  ┊   │                          │
                         └──────────────────────────┘



    ━━━━━━━
     Notes
    ───────
        character identification
            - The identifiers here are hexadecimal codes of the Unicode standard.
                : re `Unicode standard` see https://www.unicode.org/standard/standard.html
     \ [graphical syntax notation]
     \      - The present text uses syntax diagrams because it is aimed at Breccian authors in general,
     \        who are not expected to be comfortable with a textual notation such as Backus-Naur Form.



                                        \ Copyright © 2019, Michael Allan and contributors.  Licence MIT.
