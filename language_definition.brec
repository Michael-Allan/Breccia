Breccia language definition

    - A Breccian text comprises one or more file fracta.

              │
              │
              ├─────┐
              ╵     │     \ [graphical syntax notation], q.v. at end notes
             file   │
           fractum  ▲
              ╷     │
              ├─────┘
              │
              │
              ▼

            : re `(file).*\R.*(fractum)` see `^^ File fractum$`
            diagram, The form of a Breccian text.



    ━━━━━━━━━━━━━
     Alarm point
    ─────────────
        - A point with a bullet comprising ‘!!’, or ending with ‘!!’.
        - It forms urgent matter for the attention of authors.
            / E.g. indicating a problem with the text.



    ━━━━━━━━━━━━━
     Aside point
    ─────────────
        - A point with a bullet comprising ‘/’.
        - It forms matter of less prominence than its place would otherwise suggest.
            / E.g. matter to which the reader should give less attention on a first reading.
        - Its descriptor, if present, is largely free in form.



    ━━━━━━━━━━━━━━━━━━━━━━━
     Associative reference
    ───────────────────────
        / A command point.
        - It forms a reference by associating one or more pre-existing text sequences (referrer,
          or referrers) with a remote object (referent).
        - Its command has this form:

                    referrer          referential           referent
              ╶──┬─╴ clause ── P ──┬─╴  command  ───┬─ P ──╴ clause  ──┬───▶
                 │                 │                │                  │
                 └─────────────────┘                └──────────────────┘

                : re `(referrer).*\R.*(clause)` see `^^ referrer clause$`
                : re `(referential).*\R.*  (command)` see `^^ referential command$`
                : re `(referent).*\R.*clause.*(clause)` see `^^ referent clause$`
                diagram, The form of the command in an associative reference.

        - The referrer clause, if any, indicates the referrer or referrers,
          while the referent clause indicates the referent.
        - A single referrer may be associated with multiple referents.
            / Via multiple, sibling references that indicate the same referrer.
        - Multiple referrers may be overlapped or nested in any manner.
            / Via multiple, sibling references.
            / Via a single reference that indicates multiple referrers at once.
        - An associative reference to a private referent of the same author, or authors,
          must itself be private, else the reference is malformed.
            : re `private` see `^^ Privatizer$`

        compile( associative reference )
            : see @ `^^compilation$` @ `^^ Simulacrum$`
            : join `^^simulacral reference$` @ `^^ Notes$`
            referrers( associative reference )
                : join
            referent( associative reference )
                : join

        ─────────────────
         referrer clause
        ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
            - The referrer clause, if any, explicitly locates one or more referrers in the head
              of the reference’s parent.
            - Absent a referrer clause, the whole head is taken as the sole referrer.
            - Otherwise the referrers are located in the head by a pattern of text.

                  ╶──╴‘re’╶── P ──╴‘`’╶── pattern ──╴‘`’╶───▶

            referrers( associative reference )
                : join `^^simulacral reference$` @ `^^ Notes$`
                / The compiler resolves the referrers of an associative reference as follows.
                - A list in linear order of text sequences, each to be taken as a referrer.
                    : re `text sequences` see `^^original resource$` @ `^^ Notes$`
                deem+ `h` a text sequence, that of `parental head text()`;
                      `tt` a list of text sequences, intitally empty
                if( no referrer clause is present )
                    + Append `h` to `tt`.
                else
                    deem+ `p` a pattern, that of the referrer clause
                    for( each match `m` of `p` against `h` )
                        if( `m` captured no group  )
                            + Append to `tt` the whole text sequence of `m`.
                        else
                            + Append to `tt` a disjoint text sequence comprising the union
                              of all captured text sequences of `m`.
                    if( `tt` is empty )
                        throw+ broken `re` clause, pattern `p` not found
                return+ `tt`

            parental head text()
                : join `^^simulacral reference$` @ `^^ Notes$`
                - The text sequence of the head of the source parent of the associative reference.
                    : re `text sequence` see `^^original resource$` @ `^^ Notes$`
                deem+ `p` a fractum, the parent of the associative reference in the source code
                if( `p` is headless )
                    / The parent is a headless file fractum.
                    throw+ headless parent, reference is misplaced
                return+ the text sequence of the head of `p`


        ─────────────────────
         referential command
        ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
            - The referential command determines the overall type of associative reference,
              with implications for its overall effect.
                : re `overall type\R *of associative reference`
                  see `^^. associative reference$` @ `^^ fractal types$`
                : re `overall effect` see `^^compile\( associative reference \)$`
                    ·
                     ┌─╴‘cf.’╶──┐
                     │          │
                     ├─╴‘e.g.’╶─┤
                     │          │
                     ├─╴‘i.e.’╶─┤
                  ╶──┤          ├────▶
                     ├─╴‘join’╶─┤
                     │          │
                     ├─╴‘NB’╶───┤
                     │          │
                     ├─╴‘N.B.’╶─┤
                     │          │  \ [no ‘q.v.’]
                     ├── see+ ──┤
                     │          │
                     └─╴‘viz.’╶─┘

            see+ 

                  ╶──╴‘see’╶──┬── S ──╴‘also’╶──┬───▶
                              │                 │
                              └─────────────────┘

                \ ‘See also’ has no abbreviated form.  https://english.stackexchange.com/q/491883/371457

        ─────────────────
         referent clause
        ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
            - The referent clause, if any, explicitly indicates the referent.
                - Absent a referent clause, any referrer clause *implies* the referent.
                - Absent a referrer clause, the referent is implied by the fractal head of the parent.

                         inferential
                     ┌──╴ referent  ╶──┐
                     │    indicator    │
                  ╶──┤                 ├────▶
                     │     fractum     │
                     └─── indicator ───┘

                    : re `(inferential).*\R.*(referent).*\R.*(indicator)`
                      see `^^inferential referent indicator$`
                    : re `(fractum).*\R.*(indicator)` see `^^ Fractum indicator$`

            inferential referent indicator
                - An inferential referent indicator comprises one or more of three parts that together
                  define (i) referrer similarity, (ii) referential form and (iii) containment.

                          referrer similarity
                             ┌─── i ────┐
                                                   ┌──────────────────────────┐
                         ┌─────────────────────────┤ ┌──╴‘head’╶──┐           │
                      ╶──┤ ┌───╴‘same’╶────┐       └─┤            │           │   containment
                         └─┤               ├─┬── P ──┤            ├─┬─┬── P ──┴──╴  clause   ╶──┬───▶
                           └──╴‘similar’╶──┘ │       └──╴‘term’╶──┘ │ │                         │
                                             └──────────────────────┘ └─────────────────────────┘
                     
                                                       └── ii ──┘               └──── iii ────┘
                                                    referential form              containment

                / Examples of its use are:

                       : re `foo` see same @ `^^bar$`
                       : cf. @ `^^foo$`

                  (It reads better with some referential commands than with others.)
                - Referrer similarity (i) determines how broadly or narrowly the pattern
                  of referential form (ii) is to be constructed.
                    : see `^^pattern construction based on referrer similarity$` @ `^^ Notes$`
                - Referential form (ii) determines the form of the referent and how to locate it:
                        • ‘head’ defines the referent as a fractum
                           to be located by the pattern of its head, while
                        • ‘term’ defines the referent as a text sequence
                           to be located by its own pattern.
                    - In either case, the operative pattern that pinpoints the referent is constructed
                      by inference from the pattern of the referrer, or referrers.
                - Containment (iii) delimits the context in which the pattern is sought.

                default referrer similarity()
                    : join `^^simulacral reference$` @ `^^ Notes$`
                    return+ ‘similar’

                default referential form()
                    : join `^^simulacral reference$` @ `^^ Notes$`
                    if( the containing associative reference includes a referrer clause
                      and the referential command is not `join` )
                        return+ ‘term’
                    return+ ‘head’

                indicated referent( inferential referent indicator `iIR` if present )
                    : join `^^simulacral reference$` @ `^^ Notes$`
                    - The fractum or text sequence to be taken as the referent.
                        : re `fractum or text sequence` see `^^original resource$` @ `^^ Notes$`
                    deem+ `iF` a fractum indicator;
                          `fR` a referential form
                    if( `iIR` is absent )
                        + Set `fR` to `default referential form()`.
                        + Set `iIR` to an an inferential referent indicator comprising `fR`.
                    else if( `iIR` defines a referential form )
                        + Set `fR` to that referential form.
                    else
                        + Set `fR` to `default referential form()`.

                    if( the referential form `fR` is ‘head’ )
                        + Set `iF` to `inferred pattern()` of `iIR` in space-delimited conjunction
                          with any containment clause of `iIR`.
                        return+ `indicated fractum( iF )`

                    / It follows that the referential form `fR` is ‘term’.
                    if( `iIR` includes a containment clause )
                        + Set `iF` to the fractum indicator of the containment clause.
                    deem+ `f` a fractum, that of `indicated fractum( iF if set )`;
                          `p` a pattern, that of `inferred pattern()` of `iIR`;
                          `tt` a list of text sequences, intitally empty
                    for( each match `m` of `p` against the text sequence of the head of `f` )
                        if( `m` captured no group  )
                            + Append to `tt` the whole text sequence of `m`.
                        else
                            + Append to `tt` each captured text sequence of `m`.
                    if( `tt` is empty )
                        throw+ broken reference, pattern `p` not found
                    return+ a disjoint text sequence comprising the union of all `tt`

                inferred pattern()
                    : join `^^simulacral reference$` @ `^^ Notes$`
                    - Constructs by inference from the pattern of the referrer, or referrers,
                      a pattern to pinpoint the referent.
                    deem+ `fR` the referential form if defined, else `default referential form()`;
                          `p` a string buffer, initially empty;
                          `cR` the referrer clause if present;
                          `sR` the referrer similarity if defined, else `default referrer similarity()`
                    if( `cR` is present ) then the pattern of the referrer(s) is the pattern of `cR`
                        : re `pattern of the referrer` see @ `^^- Constructs by inference`
                          @ `^^inferred pattern\(`
                        + Set `p` to the pattern of `cR`.
                        + Refine `p` according to referrer similarity `sR` and referential form `fR`.
                            : see `^^pattern construction based on referrer similarity$` @ `^^ Notes$`
                    else( the pattern of the referrer(s) is the pattern of the parental head )
                        : re `pattern of the referrer` see @ `^^- Constructs by inference`
                          @ `^^inferred pattern\(`
                        + Set `p` to the string of `parental head text()`.
                        + Trim `p` of comment carriers and indent blinds.
                        + Trim `p` of leading and trailing whitespace.
                        + Set `p` to `literalized pattern( p )`.
                        + Collapse all remaining whitespace of `p` to ‘\s+’.
                            / Neutralizing differences of indentation and line wrapping.
                        + Further refine `p` according to referrer similarity `sR`
                          and referential form `fR`.
                            : see `^^pattern construction based on referrer similarity$` @ `^^ Notes$`
                    return+ `p`

            containment clause

                  ╶──╴‘@’╶── P ── fractum indicator ────▶

            referent( associative reference )
                : join `^^simulacral reference$` @ `^^ Notes$`
                / The compiler resolves the referent of an associative reference as follows.
                - The text sequence, fractum or other resource to be taken as the referent.
                    : re `text .+ other resource` see `^^original resource$` @ `^^ Notes$`
                    : re `other resource` see head @ https://tools.ietf.org/html/rfc3986#section-1.1
                if( the referent clause includes a resource indicator with a `non-fractal` qualifier )
                    return+ `indicated resource( resource indicator )`
                deem+ `iF` a fractum indicator;
                      `iIR` an inferential referent indicator
                if( a referent clause is present )
                    if( the referent clause comprises a fractum indicator )
                        + Set `iF` to the fractum indicator.
                    else( the referent clause comprises an inferential referent indicator )
                        + Set `iIR` to the inferential referent indicator.
                        break+ `if( a referent clause is present )`
                    deem+ `f` a fractum, that of `indicated fractum( iF )`;
                          `mF` a match, the match of `f` if any occurred
                    if( no `mF` occured or `mF` captured no group )
                        return+ `f`
                    return+ a disjoint text sequence comprising the union of all captured
                      text sequences of `mF`.
                return+ `indicated referent( iIR if set )`



    ━━━━━━━━━━━━━━━
     Command point
    ───────────────
        - A point with a bullet comprising ‘:’.
        - Its descriptor has this form:

              ╶── S ──┬──╴‘privately’╶─ S ──┬── command ───┬── P ──┬───▶   \ [S not P]
                      │                     │              │       │
                      └─────────────────────┘              └───────┘

        - The form of the command varies with the type of command point.
            : re `type of command point` see `^^ fractal types$` @ `^^ Fractum$`

        compile( command point )
            : see @ `^^compilation$` @ `^^ Simulacrum$`
            : join `^^simulacral reference$` @ `^^ Notes$`
            if( `privately` is present )
                + Remove `privately` and the `S` that follows it.
                + Append as child of the command point a privatizer.



    ━━━━━━━━━━━━━━━━━
     Comment carrier
    ─────────────────
        - A carrier of commentary for the attention of authors, publishers or other atypical readers.
            : cf. `^^ Privatizer$`
        - Each comment carrier is formed as either a comment appender or a comment block,
          as shown in the diagrams that follow.
            - In these diagrams, no commentary part begins or ends with a plain space character (20).
            - Any such space at the leading or trailing edge is separate from the commentary proper.

        comment appender
            - A carrier of commentary subsequent to non-commentary on the same line.

                                                               commentary
                                                           ┌─────────────────┐
                 
                                          ┌─╴◀────┐         ┌────╴◀─────────┐
                   inline non-        ┊   │       │         │               │               end
                   -plain-space ╶── S ┊╶──┴─╴‘\’╶─┴─┬── S ──┴── character ──┴─┬─┬── S ──┬──╴ of ────▶
                   (non-20)           ┊             │                         │ │       │   line
                                                    └─────────────────────────┘ └───────┘
                        : re `20` see `^^character identification$` @ `^^ Notes$`
                        : re `(end)\R.*(of).*\R.*(line)\R` see `^^end of line$`
                    diagram, The form of a comment appender.

        comment block
            - A comment carrier that extends over a sequence of (one or more) whole lines.

                                                            commentary
                                                        ┌─────────────────┐
                 
                                       ┌─╴◀────┐         ┌────╴◀─────────┐
                   start ┊             │       │         │               │               end
                    of   ┊╶──┬── S ──┬─┴─╴‘\’╶─┴─┬── S ──┴── character ──┴─┬─┬── S ──┬──╴ of ────▶
                   line  ┊   │       │           │                         │ │       │   line
                             └───────┘           └─────────────────────────┘ └───────┘
                        : re `(end)\R.*(of).*\R.*(line)\R` see `^^end of line$`
                    diagram, The form of each line of a comment block.

            - The commentary of a comment block may include one or more no-break spaces (A0).
                : see `^^character identification$` @ `^^ Notes$`
                / An author may, for example, comment out an indent blind, or a point whose bullet
                  contains a no-break space, without thereby introducing an error.

        comment-block label
            / A type of commentary.  Part of a comment block.
            - Commentary delimited by two or more backslashes in a line of a comment block.

                                                            comment-block label
                                                            ┌─────────────────┐
                 
                                           ┌─╴◀────┐         ┌────╴◀─────────┐
                   start                   │       │     ┊   │               │      ┊               end
                    of  ╶──┬── S ──┬─╴‘\’╶─┴─╴‘\’╶─┴── S ┊╶──┴── character ──┴────▶ ┊╶──┬── S ──┬──╴ of
                   line    │       │                     ┊                          ┊   │       │   line
                           └───────┘                                                    └───────┘
                    : re `(end)\R.*(of).*\R.*(line)\R` see `^^end of line$`



    ━━━━━━━━━━
     Division
    ──────────
        - A body fractum with a head in the form of a divider.

        divider
            - The head of a division.
            - It comprises all contiguous divider segments.

                      │
                      │
                      ├─────┐
                      ╵     │
                   divider  ▲
                   segment  │
                      ╷     │
                      ├─────┘
                      │
                      │
                      ▼

            / It follows that sibling dividers cannot be made contiguous;
              rather their segments would coalesce to comprise one divider.

        divider segment
            / Part of a divider.
            - It starts with a perfectly indented divider drawing character.

                                                      ┌───╴◀────────┐       ┊
                   start ┊     perfect    divider     │             │       ┊ divider segment,
                    of   ┊╶─── indent ──╴ drawing ──┬─┴─ character ─┴─┬───▶ ┊ non-divider fractum,
                   line  ┊               character  │                 │     ┊ or end of file
                                                    └─────────────────┘     ┊

                    : re `(perfect).+\R.+(indent)` see `^^perfect indent$` @ `^^ Separation$`
                    : re `(divider).+\R.+(drawing).+\R.+(character)` see `^^divider drawing character$`
            - Outside of comment carriers and indent blinds, characters between the leading,
              divider drawing character and the end boundary of the segment (rightmost in diagram)
              are unconstrained in form.

        divider drawing character
            - A character in the Unicode range 2500-259F.
                : re `2500-259F` see `^^character identification$` @ `^^ Notes$`
        division label
            / Part of a divider segment.
            - A sequence in a divider segment of non-divider-drawing characters exclusive of any
                ⁃ comment carrier,
                ⁃ indent blind or
                ⁃ leading or trailing plain space characters (20).
                    : see `^^character identification$` @ `^^ Notes$`
        division titles( divider `d` )
            : join `^^simulacral reference$` @ `^^ Notes$`
            - A list in linear order of character strings, each to be taken as a title
              of the division headed by `d`.
            - A division title comprises all division labels of contiguous lines (one or more in number)
              each of which precedes any divider drawing character of the same line.
            / Consider for example this divider:

                       ┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╮
                        This is a division title, ┊ This is not
                        and it includes this      ┊
                       ┄┄┄┄┄┄┄┄┄┄┄┄┄ This is not ┄╯
                                                    This is a 2nd division title

                        / Assume the horizontal lines above (‘┄┄┄’) are perfectly indented.
                            : re `perfectly indented` see `^^perfect indent$` @ `^^ Separation$`
                / Calling `division titles( example divider )` would yield:
                   ⇒  ‘This is a division title, and it includes this’
                      ‘This is a 2nd division title’
            / Presenters may give greater prominence to division titles,
              e.g. showing them in bold face.
            deem+ `tt` a string list, intitally empty
                / `tt` The list of title strings.
            deem+ `t` a string, `n` a text line
                / `t` The title being assembled, yet to be appended to `tt`.
                / `n` The line whose label last contributed to `t`.
            for( each division label `b` of divider `d` )
                if( `b` leads the line on which it occurs, discounting plain spaces (20) )
                    : see `^^character identification$` @ `^^ Notes$`
                    - Then `b` is a titling label, meaning it contributes to a title.
                    if( `n` is unset )
                        - Then `b` starts the first title.
                        + Set `t` to the string of `b`.
                    else if( `b` occurs on the line succeeding `n` )
                        - Then `b` appends to the title (`t`) made by its predecessor.
                        + Set `t` to the concatenation of `t` + space character + string of `b`.
                    else( `t` is fully assembled and `b` starts a new title )
                        + Append to `tt` a copy of `t`.
                        + Set `t` to the string of `b`.
                    + Set `n` to the line on which `b` occurs.
            if( `t` is set )
                - Then `d` has a titling label and final title assembly `t`.
                + Append to `tt` a copy of `t`.
            return+ `tt`

        ────────────────
         false division
        ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
            - A false division is a group of siblings wherein only the first is a true division
              (often a headless one, a bare divider), the remainder being of other fractal types.
            - Normally a sibling *successor* to a division is itself a division.
                - Where it is not, it may appear (owing to its placement under the same divider)
                  to be *part* of that division.
                - Such an apparently *extended* division is called a false division.
                / The appearance of extension is false because the successors lie ‘under’
                  the same divider merely in terms of linear order, not hierarchy.
            - False divisions are a linear form of partition,
              as opposed to the hierarchic form of true divisions.
            / The whole of a false division may be transformed to a true division
              by indenting all but the first sibling into the *body* of the first.



    ━━━━━━━━━━━━━━
     File fractum
    ──────────────
        - The largest formal unit of Breccian composition, forming the content of a file.
        - It comprises a head formed as a file descriptor
          and/or a body formed as a sequenceof body fracta.

               start of file
               ┄┄┄┄┄┄┄┄┄┄┄┄┄
                     │
                     │
                     ├──────┐
                     ╵      │    ┐
                    file    │    │
                 descriptor │    │ head
                     ╷      │    │
                ┌────┤      │    ┘
                │    ├──────┘
                │    │
                │    ├────┐      ┐
                │    ╵    │      │
                │  body   ▲      │
                │ fractum │      │ body
                │    ╷    │      │
                │    ├────┘      │
                └────┤           ┘
                     │
                     │
                     ▼
               ┄┄┄┄┄┄┄┄┄┄┄┄┄
                end of file

                    : re `(file).*\R.*(descriptor)` see `^^ File descriptor$`
                    : re `(body).*\R.*(fractum)` see `^^ fractal types$`
                diagram, The form of a file fractum.

        - Either the head or the body may be absent, not both.
            / Absence of both implies no fractum at all, and an empty file.
        - The head is absent (and a body fractum present) if the first line of the file
          is perfectly indented and not part of a comment block.
            : re `perfectly indented` see `^^perfect indent$` @ `^^ Separation$`

        ─────────────────
         file descriptor
        ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
            / Aka ‘file head’.
            : cf. `^^point descriptor$`
            - The head of a file fractum.
            - It is largely free in form, constrained only by its foregap (F) and end boundary.

                                    ┌───────╴◀─────────┐
                   start ┊          │                  │        ┊ end boundary
                    of   ┊╶── F ──┬─┴── term ──┬── P ──┴─┬────▶ ┊   of head
                   file  ┊        │            │         │      ┊
                                  │            └──┬──────┘
                                  └───────────────┘
                        : re `(end boundary)\R.+(of head)`
                          see `^^- Always its end boundary` @ `^^head$` @ `^^ Fractum$`
                    diagram, The form of a file descriptor.

            term
                - A sequence of non-whitespace characters that does not comprise
                  a sequence of backslashes ‘\’.
                    / Here a sequence of backslashes ‘\’ would instead delimit a comment carrier;
                      so forming part of a gap (F or P), not of a term.
                - By definition, the first term will not be perfectly indented.
                    : re `perfectly indented` see `^^perfect indent$` @ `^^ Separation$`
                    / Here a perfect indent would instead form the start of a body, not of a head.

        ────────────
         file title
        ┈┈┈┈┈┈┈┈┈┈┈┈
            - The file title, if any, is determined by the first fractal head in linear order
              that yields a non-empty result after collapsing the whitespace of the relevant part
              of its content according to head type:
                • file head or point head
                    - The relevant part excludes comment carriers and precedes any indent blind.
                • divider
                    - The relevant part is the first label.



    ━━━━━━━━━
     Fractum
    ─────────
        - A fractum is the basic formal unit of Breccian composition, recursion and order.
        - It divides formally into two parts: a head and a body.

                      │
                      │
                      ╵
                   · · · ·        ┐
                   ·     ·        │
                   ·  ?  ·        │ head
                   ·     ·        │
                   · · · ·        ┘
                      ╷
                      │
                 ┌────┤           ┐
                 │    ├────┐      │
                 │    ╵    │      │
                 │  body   ▲      │ body
                 │ fractum │      │
                 │    ╷    │      │
                 │    ├────┘      │
                 └────┤           ┘
                      │
                      │
                      ▼

                diagram, The abstract form of a fractum.
        head
            - The part of a fractum exclusive of its children.
            - Its form (shown abstractly in the diagram) varies according to fractal type.
            - Never does the head of a body fractum, however, begin with a newline.
                / Only a file head may begin with a newline.
                - Every newline belongs to the same fractal head as the character that precedes it;
                  or, if no character precedes it, then it belongs to the file head.
            - Always its end boundary (not fully shown) comprises one of:
                • the head successor
                    - The head successor is the fractum succeeding the head in linear order.
                    - In terms relative to the head’s own fractum F, the head successor is the first
                      applicable of:
                        ⁃ The first child of F.
                            / In its body, that is.
                        ⁃ The next sibling of F.
                        ⁃ The next sibling of the nearest ancestor of F.
                    - Always in this case the final character sequence of the head
                      comprises one or more newlines.
                        / In this case, even a point head that nominally omits its descriptor
                          must in fact have a descriptor comprising one or more newlines.
                • the end of the file
        body
            - The part of a fractum comprising its children alone; a sequence of sibling body fracta.
            - A body is always optional: regardless of fractal type, it may be omitted.

        ───────────────
         fractal types
        ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
            ◆ file fractum
            ◇ body fractum
                ◆ division
                ◇ point
                    ◆ alarm point
                    ◆ aside point
                    ◇ command point
                        ◇ associative reference
                            ◆ jointer
                            ◆ pointer
                        ◆ privatizer
                    ◆ plain point †
                    ◆ task point
            legend
                ◇ abstract type
                ◆ concrete type
                † informal type

        ───────────────────
         hierarchic relata
        ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
            : privately cf. `comparative genealogical terms$`
              @ http://reluk.ca/project/proto-wayic/origins/doc.task
            ancestor, of a body fractum
                - One of the parent and the parent’s ancestors.
                / No file fractum has an ancestor, body fracta alone have ancestors.
            parent, of a body fractum
                - The nearest predecessor of less indent, if any, otherwise the file fractum.
                / No file fractum has a parent, body fracta alone have parents.
            sibling, of a body fractum
                - Another of the same parent.
                / No file fractum has a sibling, body fracta alone may have siblings.
                / No file fractum is a sibling; all siblings are body fracta.
            child, of a fractum
                - One for whom the fractum is parent.
                / No file fractum is a child; all children are body fracta, and vice versa.
            descendant, of a fractum
                - One of the children and their descendants.
                / No file fractum is a descendant; all descendants are body fracta, and vice versa.

        ───────────────
         linear relata
        ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
            predecessor, of a fractum or character
                - Another that precedes in linear order.
                / (in the definite sense, e.g. ‘the predecessor’)
                  The immediate predecessor.
            successor, of a fractum or character
                - Another that follows in linear order.
                / (in the definite sense, e.g. ‘the successor’)
                  The immediate successor.



    ━━━━━━━━━━━━━━━━━━━
     Fractum indicator
    ───────────────────
        / Part of an associative reference or other referential markup.
        - A fractum indicator comprises one or both of a pattern series and a resource indicator.

                 ┌──────────────────────────────────────────┐
              ╶──┤                                          │
                 └──┬──╴‘`’╶── pattern ──╴‘`’╶──┬──┬── CS ──┴── resource indicator ──┬────▶
                    │                           │  │                                 │
                    └─────────────╴◀── CS ──────┘  └─────────────────────────────────┘

        - In the namesake case — absent a `non-fractal` qualifier, that is — the fractum indicator
          indicates a fractum.
            : re `\`non-fractal\` qualifier` see `^^ Resource indicator$`
            - Any pattern series pinpoints with each pattern a fractal head, while any resource indicator
              resolves to a Breccian file and therewith a file fractum.
            - The overall indicated fractum is the one resolved leftmost in the indicator
              and so deepest in the fractal hierarchy.
            / For example, here is a fractum indicator for the present fractum:

                   `^^/ For example, here is` @ `^^ Fractum indicator$` @ ./language_definition.brec
                 
                   └────────────────────────┘   └─────────────────────┘  └──────────────────────────┘
                            pattern                     pattern               resource indicator

        - Otherwise no actual fractal indication is here defined.
            - The only definite indication in the presence of a `non-fractal` qualifier
              is the indicated resource as a whole, namely the referent of the URI reference.
                : re `URI reference` see @ `^^ Resource indicator$`
            / It may be left to the reader to determine what more, if anything, the author intends.

        CS, containment separator

              ╶── P ──╴‘@’╶── P ───▶

        indicated fractum( fractum indicator `i` if present )
            : join `^^simulacral reference$` @ `^^ Notes$`
            - The fractum indicated, together with any match that occurred to pinpoint it.
                : re `fractum` see `^^original resource$` @ `^^ Notes$`
            deem+ `p` a pattern
                / The next pattern to seek in the body of fractum `f`.
            if( `i` is present )
                if( `i` includes a resource indicator with a `non-fractal` qualifier )
                    throw+ non-fractal resource
                if( `i` includes a pattern series )
                    + Set `p` to the final pattern in linear order.
            deem+ `r` a resource, namely `indicated resource( any resource indicator of i )`
            if( `r` contains no file fractum )
                throw+ non-Breccian resource
            deem+ `f` a fractum, initially the file fractum of `r`;
                  `mF` a match;
                  `desc` a fractum
                / `desc` A descendant fractum of `f`, the last matched.
            while( `p` is set )
                for( each match `m` of pattern `p` against the body of `f` )
                    deem+ `head` the fractal head intersected by the first line of `m`
                    unless( all lines of `m` intersect `head` )
                        throw+ ambiguous reference, `p` intersects multiple heads
                    if( `desc` is set )
                        throw+ ambiguous reference, `p` matches multiple fracta
                    + Set `desc` to the fractum of `head`.
                    + Set `mF` to `m`.
                if( `desc` is unset )
                    throw+ broken reference, pattern `p` not found
                + Set `f` to `desc`.
                + Unset `desc`.
                + Set `p` to its predecessor in `i`, if any, else unset it.
            return+ `f` and any `mF`



    ━━━━━━━━━━━━━━
     Indent blind
    ──────────────
        - A sequence of lines whose first non-plain-space character (non-20) is a no-break space (A0).
            : see `^^character identification$` @ `^^ Notes$`
                ·
                                            ┌───╴◀────────┐
               start ┊                      │             │     comment appender
                of   ┊╶──┬── S ──┬── A0 ──┬─┴─ character ─┴─┬──╴ or end of line ╶───▶
               line  ┊   │       │        │                 │
                         └───────┘        └─────────────────┘

                diagram, The form of each line in an indent blind.  This diagram
                  itself is an example of a blind comprising several such lines.

        - Regardless of its indentation, no line of an indent blind is perfectly indented.
            : re `perfectly indented` see `^^perfect indent$` @ `^^ Separation$`
            - Therefore no indent blind ever interrupts the fractal head in which it occurs;
              always the head continues through the blind.
        - Outside of any comment appender, the inline characters after the leading no-break space
          are unconstrained in form.



    ━━━━━━━━━
     Jointer
    ─────────
        - An associative reference with a referential command of `join`.
            : cf. `^^Pointer$`
        - In effect it stands for the fractal body of its referent.
        - Any referrer clause in a jointer indicates the referrer in particular as the rationale
          for writing the jointer into the text.
        compile( jointer )
            : see @ `^^compilation$` @ `^^ Simulacrum$`
            : join `^^simulacral reference$` @ `^^ Notes$`
            if( the referent of the jointer is a non-fractal resource )
                return+
            deem+ `sub` the fractum to subjoin
            if( the referent is a fractum )
                + Set `sub` to the referent.
            else( the referent is a text sequence )
                + Set `sub` to the fractum whose head contains the referent.
            - Each parent of the jointer gains for a child each child of `sub`
              that does not duplicate a pre-existing child.
                / Not to imply that the text would be presentable in this form.
                / If in the source code `sub` itself has a jointer as its child,
                  then the effect will apply recursively.
            - By the same token, the children of `sub` gain for a parent each parent
              of the jointer that does not duplicate a pre-existing parent.
                / Again, the effect here is recursive.
            - In both cases, the duplication test ignores variance in whitespace and comment carriers.



    ━━━━━━━━━━━━━━━━━━
     Pattern matching
    ──────────────────
        - Certain command points use regular-expression patterns to match text sequences.
        - Pattern matching there is blind both to comment carriers and to sequences of space characters
          that immediately precede a comment appender.
            / Effectively they are removed before matching proceeeds.
        - It proceeds in multiline mode, as for Perl’s `m` operator.
            : see `^^m$` @ non-fractal https://perldoc.perl.org/perlre#Modifiers
        - The pattern language comprises a subset of the formal elements defined by Perl,
          together with a few additions tailored to Breccia, all as detailed below.

        \b
            - Word boundary.
            : see https://perldoc.perl.org/perlrebackslash#%5Cb%7B%7D,-%5Cb,-%5CB%7B%7D,-%5CB
        \d
            - Decimal digit.
            : see https://perldoc.perl.org/perlrebackslash#Character-classes
        \R
            - Line break.
            : see https://perldoc.perl.org/perlrebackslash#%5CR
        \t
            - Four spaces, viz. one unit of perfect indentation.
                : see `^^perfect indent$` @ `^^ Separation$
                / As opposed to (Perl) a tab character.
                    : see https://perldoc.perl.org/perlrebackslash#Fixed-characters
            : cf. `^^\^\^$`
        \N{⋯}
            - Character or character sequence by name or number.
            : see https://perldoc.perl.org/perlrebackslash#Named-or-numbered-characters-and-character-sequences
        \ 
            - It ‘either takes away the special meaning of the character following it, \
              or it is the start of a backslash or escape sequence.’
                : see https://perldoc.perl.org/perlrebackslash#The-backslash
            - Note that it could, instead, inadvertently form a comment appender;
              as it does here, for example:

                      : see ` \\ ` @ non-fractal foo.html

                - To avoid that, substitute an equivalent pattern, such as:

                      : see ` \\\N{U+20}` @ non-fractal foo.html
        ^
            - The beginning of a line (zero width).
            : see https://perldoc.perl.org/perlre#Metacharacters
        ^^
            - A perfect indent, equivalent to `^\t*`
        .
            - Any character except a newline.
            : see https://perldoc.perl.org/perlre#Metacharacters
        $
            - The end of a line (zero width).
            : see https://perldoc.perl.org/perlre#Metacharacters
        |
            - Alternation.
            : see https://perldoc.perl.org/perlre#Metacharacters
        (⋯)
            - Capture group.
            : see https://perldoc.perl.org/perlre#Capture-groups
        (?:⋯)
            - Cluster group.
            : see https://perldoc.perl.org/perlre#(?:pattern)
            / Excluding the flag modifiers.
        *
            - Zero or more times.
            : see https://perldoc.perl.org/perlre#Metacharacters
        + 
            - One or more times.
            : see https://perldoc.perl.org/perlre#Metacharacters
        ?
            - Once or not at all.
            : see https://perldoc.perl.org/perlre#Metacharacters

        literalized pattern( string )
            : join `^^simulacral reference$` @ `^^ Notes$`
            return+ the literally enquoted pattern of `string`, as defined for Perl `quotemeta`
                : re `quotemeta` see https://perldoc.perl.org/functions/quotemeta.html


    ━━━━━━━━━━━━━
     Plain point
    ─────────────
        - A catch-all designation for points of no defined subtype.
            : see `^^ fractal types$`
        - A plain point is largely free in form.



    ━━━━━━━
     Point
    ───────
        - A body fractum with a head in this form:

               start ┊     perfect                   point             ┊ end boundary
                of   ┊╶─── indent ─── bullet ──┬── descriptor ──┬────▶ ┊   of head
               line  ┊                         │                │      ┊
                                               └────────────────┘
                    : re `(perfect).+\R.+(indent)` see `^^perfect indent$` @ `^^ Separation$`
                    : re `(end boundary)\R.+(of head)`
                      see `^^- Always its end boundary` @ `^^head$` @ `^^ Fractum$`
                diagram, The form of a point head.

        bullet
            - The bullet of a point head is defined by its leading and trailing edges
              as shown in the diagrams below.

                                       non-backslash, non-whitespace,
                   perfect ┊   ┌─────╴ non-divider-drawing character ────────┐
                   indent  ┊╶──┤                                             ├────▶
                           ┊   └──┬─╴‘\’╶─┬──╴ non-backslash, non-newline, ──┘
                                  │       │     non-plain-space character
                                  └─╴◀────┘
                        : re `(perfect).+\R.+(indent)` see `^^perfect indent$` @ `^^ Separation$`
                        : re `divider-drawing character` see `^^divider drawing character$`
                    diagram, The form of a bullet’s leading edge.

            - Between the edges, any non-alphanumeric, non-whitespace character may be followed
              by a single no-break space (A0).
                / Authors may use such a no-break space in lieu of a plain space in order to avoid
                  the formation of a trailing edge that would prematurely terminate the bullet.
                : re `alphanumeric` see `^^alphanumeric$` @ `^^ Notes$`
                : re `A0` see `^^character identification$` @ `^^ Notes$`
            - The two edge diagrams (above and below) are not mutually exclusive,
              their bullet characters may overlap.
                / The bullet may, for example, comprise a single character that alone occupies
                  both the leading and trailing edge.
                    ·
                                                  ┊
                                            ┌───▶ ┊╶─── end of line
                         non-alphanumeric   │     ┊
                     ┌──╴ non-whitespace ╶──┼───▶ ┊╶──╴‘ ’
                     │      character       │     ┊                           comment
                  ╶──┤                      └───▶ ┊╶── A0 ──┐           ┌───▶ appender
                     │     alphanumeric           ┊         │           │
                     └────  character   ────────▶ ┊╶────────┴───┬── S ──┴─┬──▶ end of line
                                                  ┊             │         │
                                                                └─────────┘
                        : re `A0` see `^^character identification$` @ `^^ Notes$`
                        : re `(comment).+\R.+(appender)` see `^^comment appender$`
                    diagram, The form of a bullet’s trailing edge.  The bullet
                      itself includes only parts to the left of the dashed line.

            / As the diagram shows, no bullet ends with a space character (20 or A0).
              Any space character at the trailing edge is separate from the bullet proper.
                / Here a no-break space (A0) may be used to form a bullet comprising ‘\’,
                  which otherwise would be taken to delimit a comment block.
                    : e.g. `^^\\.$` @ `^^ Pattern matching$`

        point descriptor
            : cf. `^^ file descriptor$`
            - Elaborative, explanatory text in the head of a point.
            - It starts with a postgap separator.

                            · · · ·
                            ·     ·       ┊ end boundary
                  ╶── P ─── ·  ?  · ────▶ ┊   of head
                            ·     ·       ┊
                            · · · ·
                        : re `(end boundary)\R.+(of head)`
                          see `^^- Always its end boundary` @ `^^head$` @ `^^ Fractum$`
                    diagram, The abstract form of a point descriptor.

            - The postgap may be further constrained in form, depending on the type of point.
                : re `type of point` see `^^. point$` @ `^^ fractal types$` @ `^^ Fractum$`
            - What follows the postgap (abstracted from the diagram) also depends on the point type.
                / Here some types are largely free in form, constrained only by the end boundary of the
                  fractal head (as shown), while others, such as command points, are tightly constrained.



    ━━━━━━━━━
     Pointer
    ─────────
        - An associative reference whose referential command is other than ‘join’.
        : cf. `^^Jointer$`



    ━━━━━━━━━━━━
     Privatizer
    ────────────
        - A command point that makes a private fractum of its simulacral parent.
            / So pertaining soley to the author, or authors.
                : cf. `^^ Comment carrier$`
            / The effect applies to the parent and all its descendants.
        - Its command has this form:

              ╶──╴‘private’╶───▶



    ━━━━━━━━━━━━━━━━━━━━
     Resource indicator
    ────────────────────
        / Part of an associative reference or other referential markup.
                ·
              ╶──┬──╴‘non-fractal’╶── P ──┬── URI reference ────▶
                 │                        │
                 └────────────────────────┘
                    : re `URI reference` see https://tools.ietf.org/html/rfc3986#section-4.1
                diagram, The form of a resource indicator.

        - The `non-fractal` qualifier, if present, stops any attempt
          to distinguish fracta in the referent during compilation.
            / Authors may use it to forestall compiler errors, e.g. in cases where the referent
              is non-Breccian or malformed.

        indicated resource( resource indicator `i` if present )
            : re `resource` see head @ https://tools.ietf.org/html/rfc3986#section-1.1
            : re `resource` see `^^original resource$` @ `^^ Notes$`
            : join `^^simulacral reference$` @ `^^ Notes$`
            deem+ `r` a resource, initially the present file
            if( `i` is present )
                unless( the URI reference of `i` resolves to a referent )
                    throw+ broken reference
                + Set `r` to the referent.
            return+ `r`



    ━━━━━━━━━━━━
     Separation
    ────────────
        allowed whitespace
            : see `^^character identification$` @ `^^ Notes$`
            • plain space ‘ ’ (20)
            • newline comprising either a line feed (A), or a carriage return (D) followed by a line feed
            • no-break space (A0) as described for use in bullets, indent blinds and comment blocks
            \ Allowing other horizontal whitespace characters (e.g. 9, 2000-200A, 202F, 205F, 3000)
            \ might lead to confusion, considering that indentation determines syntax.

        end of line
            - Each line end is formed either as a line break indicated by a newline,
              or as the end of the file.

        F
            - Foregap, a separator in the following form.

                             ┌──────────────╴◀────────────┐
                             │                            │
                             │  ┌─── comment block ────┐  │
                             │  │                      │  │
                             │  ├───── indent blind ───┤  │
                   start ┊   │  │                      │  │
                    of   ┊╶──┴──┼────────┬── newline ──┴──┴──┬────▶
                   line  ┊      │        │                   │
                                └── S ─┬─┘                   │
                                       └─────────────────────┘

        P
            - Postgap, a separator in the following form.

                     ┌─────────┐
                     │       ┌─┴── newline ───┐
                     │       │                │
                  ╶──┴── S ──┼──── comment ╶──┴──┬── F ──┬────▶
                             │     appender      │       │
                             │                   └──┬────┘
                             └──────────────────────┘
                    : re `(comment).+\R.+(appender)` see `^^comment appender$`

        perfect indent
            - A separator comprising zero or more plain space characters (20) in the following form.

                               ┌───────────╴◀────────────┐
                   start ┊     │                         │       ┊
                    of   ┊╶──┬─┴─╴‘ ’╶─╴‘ ’╶─╴‘ ’╶─╴‘ ’╶─┴─┬───▶ ┊ non-whitespace
                   line  ┊   │                             │     ┊ character
                             └─────────────────────────────┘
                    : re `20` see `^^character identification$` @ `^^ Notes$`

        S
            - A separator comprising plain space characters (20) in the following form.

                     ┌─╴◀────┐
                     │       │
                  ╶──┴─╴‘ ’╶─┴───▶
                                        : re `20` see `^^character identification$` @ `^^ Notes$`


    ━━━━━━━━━━━━
     Simulacrum
    ────────────
        - A Breccian text in compiled, executable form,
          as opposed to the initial, written form of its source code.
        - It is a more literal form of the text, one step closer to the meaning.
        - It results from compiling the source code.

        compilation
            : join `^^simulacral reference$` @ `^^ Notes$`
            - Compilation is the ad hoc work of various tools and other software
              here referred to as compilers.
            - Initially making it equal to the source form, the compiler constructs the simulacral form
              by the transformative effect of executing its embedded command points, as follows.

            for( each command point in linear order )
                compile( command point )
                    : join
            for( each associative reference in linear order )
                compile( associative reference )
                    : join
            for( each jointer in linear order )
                compile( jointer )
                    : join

        default referent: source code or simulacrum?
            - Except where defined otherwise, the default referent in the language definition
              is the source code.
            - Where it is unclear whether the definition refers to the simulacum versus the source code,
              take it as referring to the source code.



    ━━━━━━━━━━━━
     Task point
    ────────────
        - A point with a bullet comprising ‘+’, or ending with ‘+’.
        - It describes work to be done or undertaken.
            / After the definition of ‘task’ in the Oxford English Dictionary.
                : see https://www.lexico.com/en/definition/task
        \ Defining a specialized point for tasking is justified by the Breccian purpose of text drafting
        \ for which inline tasking is an important capability.
            \ re `purpose of text drafting` see `for point-form outlining and drafting` @ README.html


    ━━━━━━━
     Notes
    ───────
        alphanumeric
            - An alphanumeric character is a grapheme cluster wherein the base character either
              has Unicode property `alphabetic` or belongs to general category `Nd`.
                : re `alphabetic` see https://www.unicode.org/reports/tr44/tr44-26.html#Alphabetic
                : re `Nd` see https://www.unicode.org/reports/tr44/tr44-26.html#General_Category_Values
        character identification
            - Characters are identified by the hexadecimal codes of the Unicode standard.
                : re `Unicode standard` see https://www.unicode.org/standard/standard.html
     \\ [graphical syntax notation]
     \      - The present text uses syntax diagrams because it is aimed at Breccian authors in general,
     \        who are not expected to be comfortable with a textual notation such as Backus-Naur Form.
     \\ [no ‘q.v.’]
     \      - No referential command of `q.v.` is defined.
     \      ∵ It would complicate the definition.
     \          ∵ Formally it would make grammatical sense to the reader only in conjunction with both
     \            no referrer clause, and either an inferential referent indicator or no referent clause.
     \      ∵ It would be redundant.
     \          ∵ The present commands suffice to handle all potential use cases of `q.v.`.
        original resource
            - Each text sequence, markup element or other resource here mentioned is the original
              in its place, not a separate copy of the original.
        pattern construction based on referrer similarity
            : see @ http://reluk.ca/project/Breccia/action_plan.brec
            - How the construction is refined according to referrer similarity in particular cases
              has yet to be defined, pending implementation trials.
        simulacral reference
            - Herein the default referent is the simulacrum, not the source code.
                : cf. `^^default referent` @ `^^ Simulacrum$`
     \\ [S not P]
     \      - So parsers may reach the command and reify the fractal type without having to navigate
     \        the complexity of a postgap.



                                                    \ Copyright © 2019-2021  Michael Allan.  Licence MIT.
